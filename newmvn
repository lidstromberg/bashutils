#!/bin/bash

################################################
# script to generate a new maven java project
# and populate the pom.xml with known requirements
################################################


#########################
#check that the supplied arguments are correct
#########################
if [ $# -eq 0 ]; then
	echo "Run as 'newmvn mvnGroup mvnArtifact installDirectory pomType'"
	exit 0
elif [ $# -gt 4 -o $# -lt 4 ]; then
	echo "Incorrect number of arguments.. run as 'newmvn mvnGroup mvnArtifact installDirectory pomType'"
	exit 0
fi


#########################
#check that the third argument is an existing directory
#########################
if ! [ -d $3 ]; then
	echo "third argument should be an existing directory"
fi


########################
# collect the vars
########################
GROUPID=$1
ARTID=$2
DIR=$3
POM=$4
GRPROOT=`echo ${GROUPID} | sed 's/\./\//g'`
SRCROOT=${ARTID}/src/main/java/${GRPROOT}
RSCROOT=${ARTID}/src/main


########################
#move into the target directory
########################
cd $DIR


########################
#generate the maven base project
########################
mvn archetype:generate \
	-DgroupId=$GROUPID \
	-DartifactId=$ARTID \
	-DarchetypeArtifactId=maven-archetype-quickstart \
	-DinteractiveMode=false \
	-DarchetypeVersion=1.4


########################
#create a pom.xml
########################
if [ $POM == "beam" ]; then
	cat ~/bin/bashutils/beampom.xml | sed "s/{{REPLACEME}}/$GROUPID/g" | sed "s/{{REPLACE-ME}}/$ARTID/g" > $ARTID/pom.xml
elif [ $POM == "boot" ]; then
	cat ~/bin/bashutils/bootpom.xml | sed "s/{{REPLACEME}}/$GROUPID/g" | sed "s/{{REPLACE-ME}}/$ARTID/g" > $ARTID/pom.xml	
	
	#push in a controller and a boot app.java
	if [ -d $SRCROOT ]; then
		cat ~/bin/bashutils/apptext | sed "s/{{REPLACEME}}/$GROUPID/g" | sed "s/{{REPLACE-ME}}/$ARTID/g" > $SRCROOT/App.java
		cat ~/bin/bashutils/controllertext | sed "s/{{REPLACEME}}/$GROUPID/g" | sed "s/{{REPLACE-ME}}/$ARTID/g" > $SRCROOT/HelloController.java
		cat ~/bin/bashutils/modelcontrollertext | sed "s/{{REPLACEME}}/$GROUPID/g" | sed "s/{{REPLACE-ME}}/$ARTID/g" > $SRCROOT/GreetingController.java
		cat ~/bin/bashutils/servinit | sed "s/{{REPLACEME}}/$GROUPID/g" | sed "s/{{REPLACE-ME}}/$ARTID/g" > $SRCROOT/ServletInitializer.java
	fi;
	
	#push in the resources structure and a base application.properties
	if [ -d $RSCROOT ]; then
		mkdir $RSCROOT/resources/
		mkdir $RSCROOT/resources/static/
		mkdir $RSCROOT/resources/public/
		mkdir $RSCROOT/resources/templates/
		mkdir $RSCROOT/webapp/
		mkdir $RSCROOT/webapp/WEB-INF/

		cat ~/bin/bashutils/appeng | sed "s/{{REPLACEME}}/$GROUPID/g" | sed "s/{{REPLACE-ME}}/$ARTID/g" > $RSCROOT/webapp/WEB-INF/appengine-web.xml	
		cat ~/bin/bashutils/approp | sed "s/{{REPLACEME}}/$GROUPID/g" | sed "s/{{REPLACE-ME}}/$ARTID/g" > $RSCROOT/resources/application.properties
		cat ~/bin/bashutils/logprop | sed "s/{{REPLACEME}}/$GROUPID/g" | sed "s/{{REPLACE-ME}}/$ARTID/g" > $RSCROOT/resources/logging.properties
		cat ~/bin/bashutils/modelviewtext | sed "s/{{REPLACEME}}/$GROUPID/g" | sed "s/{{REPLACE-ME}}/$ARTID/g" > $RSCROOT/resources/templates/greeting.html
	fi;
	
else
	cat ~/bin/bashutils/basicpom.xml | sed "s/{{REPLACEME}}/$GROUPID/g" | sed "s/{{REPLACE-ME}}/$ARTID/g" > $ARTID/pom.xml
fi


########################
#populate a build file
########################
echo "mvn clean && mvn compile" > $ARTID/build
chmod 755 $ARTID/build


########################
#populate a runner file
#boot isn't bundled
########################
if [ $POM == "boot" ]; then
	echo "mvn package && java -jar target/$ARTID-1.0-SNAPSHOT.war" > $ARTID/runner
else
	echo "mvn package && java -jar target/$ARTID-bundled-1.0-SNAPSHOT.jar" > $ARTID/runner
fi;
chmod 755 $ARTID/runner
